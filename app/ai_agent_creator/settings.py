"""
Django settings for ai_agent_creator project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import json
from pathlib import Path

from celery.schedules import crontab
from dotenv import load_dotenv
import os

load_dotenv(override=True)

def get_env(variable_name, default=None):
    value = os.getenv(variable_name)

    if value is None:
        if default is not None:
            return default
        raise ValueError(f"{variable_name} is not presented in environment variables. Check your .env file")
    if str(value).lower() in ("true", "false"):
        return str(value).lower() == "true"
    return value

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-h1r6h68v*ahazr_#a*@qr_b^grv(2_e1d+v8#8sy3#i()4$kj@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = json.loads(get_env("ALLOWED_HOSTS"))

CSRF_TRUSTED_ORIGINS = json.loads(get_env("CSRF_TRUSTED_ORIGINS"))

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ai_agent_creator.sq_lite_signals.AIAgentCreatorConfig',
    'rest_framework',
    'schedule_service',
    'github_integration',
    'ai_integration',
    'django_celery_results',
    'django_celery_beat',
    'drf_yasg'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ai_agent_creator.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ai_agent_creator.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 10,  # 10 секунд будет ждать, пока база разблокируется
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = "./static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REDIS_HOST = get_env('REDIS_HOST', 'redis://localhost:6379')

# Celery Configuration
CELERY_CONFIGURATION = {
    "broker_url": f"{REDIS_HOST}/0",
    "result_backend": "django-db",#f"{REDIS_HOST}/0",
    "accept_content": ["json"],
    "task_serializer": "json",
    "result_serializer": "json",
    "timezone": TIME_ZONE,
    "task_track_started": True,
    "task_acks_late": True,
    "beat_schedule": {
        'schedule_ai_tasks': {
            'task': 'schedule_ai_tasks',
            'schedule': crontab(hour='0,8,16', minute=0),  # Запуск в 00:00, 08:00, 16:00
        },
        'run_scheduled_ai_tasks': {
            'task': 'run_scheduled_ai_tasks',
            'schedule': crontab(minute='*/1'),  # Запуск каждую минуту
        },
    },
    "beat_scheduler": "django_celery_beat.schedulers.DatabaseScheduler",
    "beat_sync_every": 1,
    "result_expires": 604800,
}
# CELERY_CONFIG_FROM_FILE = get_env("CELERY_CONFIG_FROM_FILE", False)

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
    ),
    # "DEFAULT_PAGINATION_CLASS": "shared.utils.PageNumberPaginationWithPageSize",
}

GEMINI_API_KEY = get_env("GEMINI_API_KEY", None)
